/// Partially generated using schemafy.
use serde::{Deserialize, Serialize};

use super::base::*;

#[derive(Serialize, Deserialize, Debug, PartialEq, Default)]
pub struct MetaSpecItemXref {
    /// article name at [Forensics Wiki](https://forensicswiki.xyz/page/Main_Page), which is a
    /// CC-BY-SA-licensed wiki with information on digital forensics, file formats and tools
    ///
    /// full link name could be generated as `https://forensicswiki.xyz/page/` + this value
    #[serde(default, with = "::schemafy_core::one_or_many")]
    pub forensicswiki: Vec<MediaWikiPageName>,
    /// ISO/IEC standard number, reference to a standard accepted and published by
    /// [ISO](https://www.iso.org/) (International Organization for Standardization).
    ///
    /// ISO standards typically have clear designations like "ISO/IEC 15948:2004", so value should
    /// be citing everything except for "ISO/IEC", i.e. `15948:2004`
    #[serde(default, with = "::schemafy_core::one_or_many")]
    pub iso: Vec<IsoIdentifier>,
    /// article name at ["Just Solve the File Format Problem"
    /// wiki](http://fileformats.archiveteam.org/wiki/Main_Page), a wiki that collects information
    /// on many file formats
    ///
    /// full link name could be generated as `http://fileformats.archiveteam.org/wiki/` + this
    /// value
    #[serde(default, with = "::schemafy_core::one_or_many")]
    pub justsolve: Vec<MediaWikiPageName>,
    /// identifier in [Digital
    /// Formats](https://www.loc.gov/preservation/digital/formats/fdd/browse_list.shtml) database
    /// of [US Library of Congress](https://www.loc.gov/)
    ///
    /// value typically looks like `fddXXXXXX`, where `XXXXXX` is a 6-digit identifier
    #[serde(default, with = "::schemafy_core::one_or_many")]
    pub loc: Vec<LocIdentifier>,
    /// MIME type (IANA media type), a string typically used in various Internet protocols to
    /// specify format of binary payload
    ///
    /// there is a [central registry of media
    /// types](https://www.iana.org/assignments/media-types/media-types.xhtml) managed by IANA
    ///
    /// value must specify full MIME type (both parts), e.g. `image/png`
    #[serde(default, with = "::schemafy_core::one_or_many")]
    pub mime: Vec<MimeType>,
    /// format identifier in [PRONOM Technical
    /// Registry](https://www.nationalarchives.gov.uk/PRONOM/Default.aspx) of [UK National
    /// Archives](https://www.nationalarchives.gov.uk/), which is a massive file formats database
    /// that catalogues many file formats for digital preservation purposes
    #[serde(default, with = "::schemafy_core::one_or_many")]
    pub pronom: Vec<PronomIdentifier>,
    /// reference to [RFC](https://en.wikipedia.org/wiki/Request_for_Comments), "Request for
    /// Comments" documents maintained by ISOC (Internet Society)
    ///
    /// RFCs are typically treated as global, Internet-wide standards, and, for example, many
    /// networking / interoperability protocols are specified in RFCs
    ///
    /// value should be just raw RFC number, without any prefixes, e.g. `1234`
    #[serde(default, with = "::schemafy_core::one_or_many")]
    pub rfc: Vec<RfcIdentifier>,
    /// item identifier at Wikidata, a global knowledge base
    ///
    /// value typically follows `Qxxx` pattern, where `xxx` is a number generated by Wikidata, e.g.
    /// `Q535473`
    #[serde(default, with = "::schemafy_core::one_or_many")]
    pub wikidata: Vec<WikidataIdentifier>,
}

// Non-standard implementation of the meta spec. Only certain keys are available in non-root specs.

#[derive(Serialize, Deserialize, Debug, PartialEq, Default)]
pub struct CommonMetaSpec {
    pub xref: Option<MetaSpecItemXref>,
    pub endian: Option<Endian>,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Default)]
pub struct RootMetaSpec {
    pub id: Identifier,
    pub title: Option<String>,
    #[serde(default, with = "::schemafy_core::one_or_many")]
    pub application: Vec<String>,
    #[serde(
        default,
        with = "::schemafy_core::one_or_many",
        rename = "file-extension"
    )]
    pub file_extension: Vec<String>,

    pub license: Option<String>,
    #[serde(default)]
    pub imports: Vec<String>,

    /// advise the Kaitai Struct Compiler (KSC) to use debug mode
    #[serde(rename = "ks-debug")]
    pub ks_debug: Option<bool>,
    /// advise the Kaitai Struct Compiler (KSC) to ignore missing types in the .ksy file, and
    /// assume that these types are already provided externally by the environment the classes are
    /// generated for
    #[serde(rename = "ks-opaque-types")]
    pub ks_opaque_types: Option<bool>,
    #[serde(flatten, rename = "ks-version")]
    pub ks_version: Option<StringOrNumber>,

    #[serde(flatten, default)]
    pub common: CommonMetaSpec,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Default)]
pub struct TypeMetaSpec {
    pub common: CommonMetaSpec,
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_meta_loads() {
        assert_eq!(
            serde_json::from_str::<RootMetaSpec>(
                r#"{ "id": "png", "file-extension": "png", "endian": "be" }"#
            )
            .unwrap(),
            RootMetaSpec {
                file_extension: vec!["png".to_owned()],
                id: "png".to_owned(),
                common: CommonMetaSpec {
                    endian: Some(Endian::Big),
                    ..CommonMetaSpec::default()
                },
                ..RootMetaSpec::default()
            }
        )
    }
}
